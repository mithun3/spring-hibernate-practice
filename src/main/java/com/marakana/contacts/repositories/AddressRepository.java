package com.marakana.contacts.repositories;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.marakana.contacts.entities.Address;

//Database access

public class AddressRepository {
	
	//init will be called once
	//responsible for db initialization
	
	//we will use JNDI to look up DataSource
	
	private final DataSource dataSource;
	
	public AddressRepository(){
		try {
			Context context = new InitialContext();
			try{
				dataSource = (DataSource) context.lookup("java:comp/env/jdbc/trainingdb");
			}finally{
				context.close();
			}
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			throw new RuntimeException(e);
		}
	}
	
	public void init() throws SQLException{
		Connection connection = dataSource.getConnection();
		try{
			Statement statement = connection.createStatement();
			try{
				statement.execute("create table address (id integer generated by default as identity primary key, street varchar(20), city varchar(20), state varchar(20), zip varchar(20))");
			}finally{
				
			}
		}finally{
			connection.close();
		}
	}
	
	public void create(Address address) throws SQLException{
		Connection connection = dataSource.getConnection();
		try{
			Statement statement = connection.createStatement();
			try{
				statement.executeUpdate(
						"insert into address (street, city, state, zip) values ('"
								+ address.getStreet() + "','"
								+ address.getCity() + "','"
								+ address.getState() + "','" + address.getZip()
								+ "')", statement.RETURN_GENERATED_KEYS);
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try{
					if(generatedKeys.next())
						address.setId(generatedKeys.getLong("id"));
				}finally{
					generatedKeys.close();
				}
			}finally{
				statement.close();
			}
		}finally{
			connection.close();
		}
//		return null;//TODO
	}
	
	public void update(Address address) throws SQLException{
		Connection connection = dataSource.getConnection();
		try{
			Statement statement = connection.createStatement();
			try{
				statement.executeUpdate(
						"update address set street='"
								+ address.getStreet() + "', city = '"
								+ address.getCity() + "', state='"
								+ address.getState() + "', zip = '" + address.getZip()
								+ "' where id = "+address.getId());
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try{
					if(generatedKeys.next())
						address.setId(generatedKeys.getLong("id"));
				}finally{
					generatedKeys.close();
				}
			}finally{
				statement.close();
			}
		}finally{
			connection.close();
		}
//		return null;//TODO
	}
	
	public void delete(Address address) throws SQLException{
		Connection connection = dataSource.getConnection();
		try{
			Statement statement = connection.createStatement();
			try{
				statement.executeUpdate(
						"delete from address where id = "+address.getId());
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try{
					if(generatedKeys.next())
						address.setId(generatedKeys.getLong("id"));
				}finally{
					generatedKeys.close();
				}
			}finally{
				statement.close();
			}
		}finally{
			connection.close();
		}
//		return null;//TODO
	}

	public Address find(long id) throws SQLException{
		Connection connection = dataSource.getConnection();
		try{
			Statement statement = connection.createStatement();
			try{
				ResultSet resultSet = statement.executeQuery("select * from address where id = "+id);
				try{
					if(!resultSet.next()){
						return null;
					} else {
						return unmarshal(resultSet);
					}
				}finally{
					resultSet.close();
				}
			}finally{
				statement.close();
			}
		}finally{
			connection.close();
		}
//		return null;//TODO
	}
	
	public static Address unmarshal(ResultSet resultSet) throws SQLException{
		
		//look at curent row of reslt set
		// construct an address from the individual columns (starting at 1)
		Address address = new Address();
		address.setId(resultSet.getLong("id"));
		address.setStreet(resultSet.getString("street"));
		address.setCity(resultSet.getString("city"));
		address.setState(resultSet.getString("state"));
		address.setZip(resultSet.getString("zip"));
		return address;
	}
	
}
