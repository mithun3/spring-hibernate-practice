package com.marakana.contacts.repositories;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.marakana.contacts.entities.Contact;

//Database access

public class ContactRepository {
	
	//init will be called once
	//responsible for db initialization
	
	//we will use JNDI to look up DataSource
	
	private final DataSource dataSource;
	
	public ContactRepository(){
		try {
			Context context = new InitialContext();
			try{
				dataSource = (DataSource) context.lookup("java:comp/env/jdbc/trainingdb");
			}finally{
				context.close();
			}
		} catch (NamingException e) {
			// TODO Auto-generated catch block
			throw new RuntimeException(e);
		}
	}
	
	public void init() throws SQLException{
		Connection connection = dataSource.getConnection();
		try{
			Statement statement = connection.createStatement();
			try{
				statement.execute("create table contact (id integer generated by default as identity primary key, name varchar(20), address_id integer, foreign key (address_id) references contact)");
			}finally{
				
			}
		}finally{
			connection.close();
		}
	}
	
	public void create(Contact contact) throws SQLException{
		Connection connection = dataSource.getConnection();
		try{
			Statement statement = connection.createStatement();
			try{
				statement.executeUpdate(
						"insert into contact (name address_id) values ('"
								+ contact.getName() + "',"
								+ contact.getAddresId()+")", statement.RETURN_GENERATED_KEYS);
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try{
					if(generatedKeys.next())
						contact.setId(generatedKeys.getLong("id"));
				}finally{
					generatedKeys.close();
				}
			}finally{
				statement.close();
			}
		}finally{
			connection.close();
		}
//		return null;//TODO
	}
	
	public void update(Contact contact) throws SQLException{
		Connection connection = dataSource.getConnection();
		try{
			Statement statement = connection.createStatement();
			try{
				statement.executeUpdate(
						"update contact set name='"
								+ contact.getName() + "', address_id = '"
								+ contact.getAddresId()
								+ "' where id = "+contact.getId());
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try{
					if(generatedKeys.next())
						contact.setId(generatedKeys.getLong("id"));
				}finally{
					generatedKeys.close();
				}
			}finally{
				statement.close();
			}
		}finally{
			connection.close();
		}
//		return null;//TODO
	}
	
	public void delete(Contact contact) throws SQLException{
		Connection connection = dataSource.getConnection();
		try{
			Statement statement = connection.createStatement();
			try{
				statement.executeUpdate(
						"delete from contact where id = "+contact.getId());
				ResultSet generatedKeys = statement.getGeneratedKeys();
				try{
					if(generatedKeys.next())
						contact.setId(generatedKeys.getLong("id"));
				}finally{
					generatedKeys.close();
				}
			}finally{
				statement.close();
			}
		}finally{
			connection.close();
		}
//		return null;//TODO
	}

	public Contact find(long id) throws SQLException{
		Connection connection = dataSource.getConnection();
		try{
			Statement statement = connection.createStatement();
			try{
				ResultSet resultSet = statement.executeQuery("select * from contact where id = "+id);
				try{
					if(!resultSet.next()){
						return null;
					} else {
						return unmarshal(resultSet);
					}
				}finally{
					resultSet.close();
				}
			}finally{
				statement.close();
			}
		}finally{
			connection.close();
		}
//		return null;//TODO
	}
	
	public static Contact unmarshal(ResultSet resultSet) throws SQLException{
		
		//look at curent row of reslt set
		// construct an contact from the individual columns (starting at 1)
		Contact contact = new Contact();
		contact.setId(resultSet.getLong("id"));
		contact.setName(resultSet.getString("name"));
		contact.setAddresId(resultSet.getLong("adres_id"));
		return null;
	}
	
}
